#!/usr/bin/perl -w

#  $Id$  -*-perl-*-

#=====================================================================
#
# DESCRIPTION
#   Paranormal.se creation
#
# AUTHOR
#   Jonas Liljegren   <jonas@paranormal.se>
#
# COPYRIGHT
#   Copyright (C) 2004 Jonas Liljegren.  All Rights Reserved.
#
#   This module is free software; you can redistribute it and/or
#   modify it under the same terms as Perl itself.
#
#=====================================================================

BEGIN
{
    our $VERSION  = sprintf("%d.%02d", q$Revision$ =~ /(\d+)\.(\d+)/);
    warn "Starting creation $VERSION\n";

    our $PARAFRAME = "/var/www/test.paranormal.se/paraframe";
    our $APPROOT   = "/var/www/test.paranormal.se";

}


use lib "$PARAFRAME/lib";
use lib "$APPROOT/lib";

use Para::Frame;
use Para::Frame::DBIx;
use Para::Frame::Time;
use Para::Frame::Email;
use Para::Frame::Email::Address;
use Para::Frame::Utils;

use Para::Member;
use Para::Topic;
use Para::Widget;
use Para::Interest;
use Para::Interests::Tree;
use Para::Email;

{
    my $cfg =
    {
	'paraframe' => $PARAFRAME,
	'paraframe_group' => 'psi_cgi',

	'appbase' => 'Para',
	'approot' => $APPROOT,

	'user_class' => 'Para::Member',
	'logfile' => "$APPROOT/logs/creation.log",

	port      => 7788,
	debug     => 1,

	'site'    =>
	{
	    # Path in  URL to website
	    'webhome' => '',
	    'last_step' => "/member/db/",
	}

    };
    Para::Frame->configure( $cfg );

    # Detatch and run in background
    #
    Para::Frame->daemonize unless @ARGV;


    # Configure database
    #
    $Para::dbix = Para::Frame::DBIx ->
	new({
	    connect => ["dbi:Pg:dbname=psi1;port=5433"],
	    bind_dbh => \ $Para::dbh,
	});


    # Define TT filters
    #
    Para::Frame->add_tt_filters('html', {
	'html_psi' => \&Para::Widget::html_psi,
	'html_psi_nolinks' => sub{ Para::Widget::html_psi($_[0], 1) },
    });


    # Attatch code to hooks
    #

    # Just in case we temporarily switched to root and got an exception
    Para::Frame->add_hook('on_error_detect', sub
			  {
			      Para::Member->revert_from_root();
			    });

    Para::Frame->add_hook('before_user_logout', sub
			  {
			      $_[0]->latest_out(time);
			  });

    Para::Frame->add_hook('user_login', sub
			  {
			      $_[0]->on_login;
			  });
    Para::Frame->add_hook('before_db_commit', sub
			  {
			      Para::Topic->commit();
			  });
    Para::Frame->add_hook('after_db_rollback', sub
			  {
			      Para::Topic->rollback();
			  });
    Para::Frame->add_hook('on_startup', sub
			  {
			      $Para::dbix->connect;
			  });

    my $global_params =
    {
     'select_persons'    => \&Para::Widget::select_persons,
     'diff'              => \&Para::Widget::diff,

     'select_persons_by_name' => sub{ Para::Member->by_name( @_ ) },
     'getmember'         => sub{ Para::Member->get_by_id( @_ ) },
     'getmember_by_nick' => sub{ Para::Member->get_by_nickname( @_ ) },
     'count_online'      => sub{ Para::Member->count_currently_online },

     'topic'             => sub{ Para::Topic->get_by_id( @_ ) },
     'find_topic'        => sub{ Para::Topic->find( @_ ) },
     'find_one_topic'    => sub{ Para::Topic->find_one( @_ ) },

#	'touch_interest'    => sub{ Para::Interest->touch(@_) },
     'interest_tree'     => sub{ Para::Interest::Tree->new( @_ ) },

     'getarc'            => sub{ Para::Arc->get( @_ ) },
     'getreltype'        => sub{ Para::Arctype->new( @_ ) },
     'get_arctype_list'  => sub{ Para::Arctype->list( @_ ) },

     'alias_list'        => sub{ Para::Alias->find_by_name( @_ ) },

     'getpayment'        => sub{ Para::Payment->new( @_ ) },

     'age'               => sub{ localtime->year - $_[0]->{'bdate_ymd_year'} },
     'year'              => sub{ localtime->year },
     'now'               => sub{ scalar localtime },
     'date'              => sub{ Para::Frame::Time->get(@_) },
#	'elapsed_time'      => \&elapsed_time,

     'delay'             => sub{ sleep(@_) },
     'uc'                => sub{ "\U$_[0]" },
     'lc'                => sub{ "\L$_[0]" },

     'timediff'          => \&Para::Frame::Utils::timediff,
     'css'               =>
     {
      persistent => [ "/css/default.css" ],
      alternate =>
      {
       light => [ "/css/light.css" ],
       blue => [ "/css/blue.css" ],
      },
      default => 'blue',
     },
     'favicon'           => "/favicon.ico",
     'body_class'        => "meta",
    };
    Para::Frame->add_global_tt_params( $global_params );

    Para::Frame->watchdog_startup();
}

#########################################################

END
{
    unless( $Para::Frame::FORK )
    {
	warn "Closing down creation\n\n";
    }
}

