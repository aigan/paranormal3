#!/usr/bin/perl -w
#  $Id$  -*-perl-*-
package Para;

#=====================================================================
#
# DESCRIPTION
#   Paranormal.se creation
#
# AUTHOR
#   Jonas Liljegren   <jonas@paranormal.se>
#
# COPYRIGHT
#   Copyright (C) 2004 Jonas Liljegren.  All Rights Reserved.
#
#   This module is free software; you can redistribute it and/or
#   modify it under the same terms as Perl itself.
#
#=====================================================================

BEGIN
{
    our $VERSION  = sprintf("%d.%02d", q$Revision$ =~ /(\d+)\.(\d+)/);
    print "Starting creation $VERSION\n";

    use FindBin;
    my $configfile = $FindBin::Bin . "/config.pl";
    do $configfile or die "Failed to load config $configfile: $! ($@)\n";
}

use strict;

our $PARAFRAME; # Dir without ending /
our $APPROOT;   # Dir without ending /
our $SITE_CFG;  # Hashref with rest of config

use lib "$PARAFRAME/lib";
use lib "$APPROOT/lib";
use lib "$WA::APPROOT/lib";
use lib "$Ekoby::APPROOT/lib";
use lib "$Para::Healing::APPROOT/lib";


use locale;
use Data::Dumper;

use Para::Frame;
use Para::Frame::DBIx;
use Para::Frame::Time qw( now );
use Para::Frame::Email;
use Para::Frame::Email::Address;
use Para::Frame::Utils qw( chmod_tree );
use Para::Frame::Watchdog;
use Para::Frame::Site;

use Para;
use Para::Member;
use Para::Domains;

use Ekoby::Ekonomi;
use Ekoby::Library;

use Para::Healing;

use WA::Domains;

{
    # Do not daemonize if run with cmdline argument
    my $daemonize = @ARGV ? 0 : 1;
    my $watchdog = 1;   # Use watchdog

    unless( $SITE_CFG )
    {
	die "Site configuration missing";
    }

    my $cfg =
    {
	'paraframe' => $PARAFRAME,
	'ttcdir'    => "$APPROOT/var/ttc",
	'paraframe_group' => 'psi_cgi',

	'appbase'      => 'Para',
	'approot'      => $APPROOT,

	'user_class'   => 'Para::Member',
	'bg_user_code' => sub{ Para::Member->skapelsen },
	'logfile'      => "$APPROOT/logs/creation.log",
	'pidfile'      => "$APPROOT/var/creation.pid",

	'port'         => $SITE_CFG->{'port'},
	'debug'        => $ARGV[0] || $SITE_CFG->{'debug'} || 0,
	'do_bgjob'     => $SITE_CFG->{'do_bgjob'},
	'umask'        => 0007,
        'time_stringify' => 1,
	'site_auto'    => 1,
    };
    Para::Frame->configure( $cfg );


    # Configure database
    #
    $Para::dbix = Para::Frame::DBIx ->
	new({
	    connect => $SITE_CFG->{'dbconnect'},
	    bind_dbh => \ $Para::dbh,
	    import_tt_params => 1,
	});


    # Configure Ekoby database
    #
    $Ekoby::dbix = Para::Frame::DBIx ->
	new({
	    connect => ["DBI:Pg:dbname=ekoby;port=5433"],
	});

    # Configure Healing database
    #
    $Para::Healing::dbix = Para::Frame::DBIx ->
	new({
	     connect            =>  ["dbi:Pg:dbname=healing;port=5433"],
	     datetime_formatter => 'DateTime::Format::Pg',
	});




    my $para_css =
    {
	persistent => [ "/css/default.css" ],
	alternate =>
	{
	    light => [ "/css/light.css" ],
	    blue => [ "/css/blue.css" ],
	},
	default => 'light',
    };



    Para::Frame::Site->add({
	# Path in  URL to website
	'webhome'    => '',
	'webhost'    => $SITE_CFG->{'webhost'},
	'last_step'  => "/member/db/",
	'static_ttc' => "$APPROOT/var/ttc/static",
	'backup_host'=> $SITE_CFG->{'backup_host'},
	'loadpage'    => "/meta/loading.html",
	'params'     =>
	{
	    'css'        => $para_css,
	},
    });

    Para::Frame::Site->add({
			    'aliases'     => ['healing'],
			    'code'        => 'healing',
			    'name'        => 'Healing',
			    'webhome'     => $Para::Healing::WEBHOME,
			    'webhost'     => $Para::Healing::WEBHOST,
			    'appbase'     => 'Para::Healing',
			    'is_compiled' => 0,
			    'time_format' => "%Y-%m-%d kl %H:%M:%S",
			    'params' 	  =>
			    {
 			     'is_forummember' => \&Para::Healing::is_forummember,
		             'hdb'        => $Para::Healing::dbix,
			     'css'	  => 'style.css',
			     'favicon'    => 'images/hjarta2c.ico',
			     'description' => 'Hemsidan om olika healing-stilar såsom Reiki, Kundalini Reiki, Imara Reiki m.fl samt Indigo och
			     en avdelning för personlig/andlig utveckling. Vi har även ett forum som behandlar ett flertal ämnen.',
			     'keywords'    => 'reiki, taz, usui reiki, meditation, energi, manual, reiki manual, reiki forum, forum, reiki sweden, reiki sverige, indigo, nordisk reiki/indigo, nordisk reiki indigo, the-taz.net, hikkei, initieringar, indigobarn, indigovuxna, chakra, chakras, själsfärg, balansera, balans, universell energi, ki, chi, qi, livsenergi, indigoväg, indigovägen, indigovuxen, spirituell utveckling, personlig utveckling, meditation, mikao usui, dr usui, healing, självhealing, distanshealing, andlig utveckling, andlig, spirituell, kundalini reiki, tacyon reiki, past life reiki, birth trauma reiki, dna reiki, indigo reiki, diamond reiki, eteriska kristaller, location reiki, crystalline reiki, ethereal crystals, gold reiki, guld reiki, andlighet, bates metod, kärlek, nionde chakra, tionde chakra, åttonde chakra, jorda sig, jord, balansera aura, mental sköld, mental skydd, tam a ra sha, tamarasha, tars, chokurei, cho ku rei, ckr, dai ko myo, daikomyo, dkm, hon sha ze sho nen, honshazeshonen, hszsn, sei he ki, seiheki, shk, reiki dummies',
			    }
			   });

    Para::Frame::Site->add({
	'webhost'    => $WA::HOST,
	'appbase'    => "WA",
	'params'     =>
	{
	    'css'        => $para_css,
	    'wa_domains'        => WA::Domains->new,
	},
    });

    Para::Frame::Site->add({
	'webhost'    => "tecken.se",
	'params'     =>
	{
	    'css'        => $para_css,
	},
    });

    Para::Frame::Site->add({
	'webhost'    => "mystica.magi.se",
	'params'     =>
	{
	    'css'        => $para_css,
	},
    });

    Para::Frame::Site->add({
	'webhost'    => $Ekoby::HOST,
	'aliases'    => ['ekoby'],
	'code'       => 'eboby',
	'name'       => 'Ekobyn',
	'params' =>
	{
	    'css'               =>
	    {
		alternate =>
		{
		    Default => ["/style/main.css"],
		    Sara => ["/style/sara.css"],
		    Green => ["/style/green.css"],
		},
		default => 'Default',
	    },
	    'ekonomi' => \&Ekoby::Ekonomi::ekonomi,
	    'hyra' => \&Ekoby::Ekonomi::hyra,
	    'transtypnamn' => \&Ekoby::Ekonomi::transtypnamn,
	    'levnamn' => \&Ekoby::Ekonomi::levnamn,
	    'kontonamn' => \&Ekoby::Ekonomi::kontonamn,
	    'kontolista' => \&Ekoby::Ekonomi::kontolista,
	    'lista_belopp' => \&Ekoby::Ekonomi::lista_belopp,
	    'lista_tillgangar' => \&Ekoby::Ekonomi::lista_tillgangar,
	    'authorized_level' => \&Ekoby::Ekonomi::authorized_level,
	    'ekodbix'          => $Ekoby::dbix,
	    'library'          => sub{ Ekoby::Library->new( @_ ) },
	},
    });

    Para::Frame::Site->add({
	'webhost'    => "frame.para.se",
	'params' =>
	{
	},
    });


    # Make sure we can read/write generated files
    chmod_tree( "$APPROOT/var" );
 # Takes too long
#    chmod_tree( "$APPROOT/topic",
#		{
#		    umask => 0,
#		    dirmode => 02775,
#		    filemode => 0664,
#		});


    # Define TT filters
    #
    Para::Frame::Burner->get_by_type('html')->add_filters({
	'html_psi' => \&Para::Widget::html_psi_factory,
	'html_psi_nolinks' => \&Para::Widget::html_psi_nolinks_factory,
    }, 1);

    # Used in healing.se
    Para::Frame::Burner->get_by_type('html')->add_filters({
	'alink' => \&Para::Widget::autolink,
     });

    # Attatch code to hooks
    #

    # Just in case we temporarily switched to root and got an exception
    Para::Frame->add_hook('on_error_detect', sub
			  {
			      Para::Member->revert_from_temporary_user();
			    });

    Para::Frame->add_hook('before_user_logout', sub
			  {
			      $_[0]->on_logout;
			  });

    Para::Frame->add_hook('user_login', sub
			  {
			      $_[0]->on_login;
			  });
    Para::Frame->add_hook('before_db_commit', sub
			  {
			      Para::Member->commit();
			      Para::Topic->commit();
			  });
    Para::Frame->add_hook('after_db_rollback', sub
			  {
			      Para::Member->rollback();
			      Para::Topic->rollback();
			  });
    Para::Frame->add_hook('done', \&Para::Topic::publish_urgent);
    Para::Frame->add_hook('on_startup', sub
			  {
			      $Para::dbix->connect;
			      $Ekoby::dbix->connect;
			      $Para::Healing::dbix->connect;

			      Para::Constants->init;

			      # Take shortcut...
			      return unless $SITE_CFG->{'do_bgjob'};

			      # Setup MOTD
			      Para::Widget::new_entry(undef, 'static');
			      $Para::MOTD = Para::Widget::html_psi( Para::Member->skapelsen->presentation );
			  });
    Para::Frame->add_hook('add_background_jobs', \&Para::add_background_jobs);
    Para::Frame->add_hook('on_memory', \&Para::on_memory);
    Para::Frame->add_hook('busy_background_job', \&Para::clear_caches);


    $Para::dbix->connect; ### Need the DB for this
    my $global_params =
    {
     'diff'              => \&Para::Widget::diff,
     'tfilter_init'      => \&Para::Widget::tfilter_init,
     'new_entry'         => \&Para::Widget::new_entry,

     'members'           => bless({}, 'Para::Member'),

     'topic'             => sub{ Para::Topic->get_by_id( @_ ) },
     'find_topic'        => sub{ Para::Topic->find( @_ ) },
     'find_one_topic'    => sub{ Para::Topic->find_one( @_ ) },

     'interest_tree'     => sub{ Para::Interest::Tree->new( @_ ) },

     'getarc'            => sub{ Para::Arc->get( @_ ) },
     'getarctype'        => sub{ Para::Arctype->new( @_ ) },
     'getarctype_list'   => sub{ Para::Arctype->list( @_ ) },

     'getalias_list'     => sub{ Para::Alias->find_by_name( @_ ) },

     'getevent'          => sub{ Para::Event->get_by_id( @_ ) },
     'getevent_list'     => sub{ Para::Event->list( @_ ) },

     'getpayment'        => sub{ Para::Payment->new( @_ ) },

     'year'              => sub{ now->year },
     'now'               => \&Para::Frame::Time::now,
     'date'              => \&Para::Frame::Time::date,
     'elapsed_time'      => \&Para::Frame::Utils::elapsed_time,
     'timespan'          => \&Para::Frame::Time::timespan,

     'uc'                => sub{ "\U$_[0]" },
     'lc'                => sub{ "\L$_[0]" },

     'timediff'          => \&Para::Frame::Utils::timediff,
     'favicon'           => "/favicon.ico",
     'body_class'        => "meta",
     'motd'              => sub{ $Para::MOTD },
     'display_slogan'    => \&Para::display_slogan,
     'C'                 => Para::Constants->new,
     'domains'           => Para->domains,

    };
    $Para::dbix->disconnect; ### Done with DB
    Para::Frame->add_global_tt_params( $global_params );

    $Data::Dumper::Maxdepth = 5;


    if( $daemonize )
    {
        Para::Frame->daemonize( $watchdog );
    }
    elsif( $watchdog )
    {
	Para::Frame->watchdog_startup();
    }
    else
    {
	Para::Frame->startup();
	Para::Frame::main_loop();
    }
}

#########################################################
